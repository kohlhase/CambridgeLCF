(setq %theorydata '((parents) (types (2 . fun) (2 . prod) (0 . tr) (0 . void)) (nametypes) (operators (SND fun (prod (%VARTYPE . |'a|) (%VARTYPE . |'b|)) (%VARTYPE . |'b|)) (FST fun (prod (%VARTYPE . |'a|) (%VARTYPE . |'b|)) (%VARTYPE . |'a|)) (PAIR fun (%VARTYPE . |'a|) (fun (%VARTYPE . |'b|) (prod (%VARTYPE . |'a|) (%VARTYPE . |'b|)))) (COND fun (tr) (fun (%VARTYPE . |'a|) (fun (%VARTYPE . |'a|) (%VARTYPE . |'a|)))) (FIX fun (fun (%VARTYPE . |'a|) (%VARTYPE . |'a|)) (%VARTYPE . |'a|)) (UU %VARTYPE . |'a|) (FF tr) (TT tr) (|()| void)) (paired-infixes) (curried-infixes) (predicates (TRUTH void) (FALSITY void) (inequiv prod (%VARTYPE . |'a|) (%VARTYPE . |'a|)) (equiv prod (%VARTYPE . |'a|) (%VARTYPE . |'a|))) (version . "(RAL 1.5)") (stamp . 713790459)))
(setq %theorems '((sharetypes 11 (f%10 fun (%VARTYPE . |'a|) (%VARTYPE . |'a|)) (PAIR%9 prod (prod (%VARTYPE . |'a|) (%VARTYPE . |'b|)) (prod (%VARTYPE . |'a|) (%VARTYPE . |'b|))) (SND%8 %VARTYPE . |'b|) (x%7 prod (%VARTYPE . |'a|) (%VARTYPE . |'b|)) (PAIR%6 prod (void) (void)) (PAIR%5 prod (tr) (tr)) (PAIR%4 prod (%VARTYPE . |'b|) (%VARTYPE . |'b|)) (PAIR%3 prod (fun (%VARTYPE . |'a|) (%VARTYPE . |'b|)) (fun (%VARTYPE . |'a|) (%VARTYPE . |'b|))) (f%2 fun (%VARTYPE . |'a|) (%VARTYPE . |'b|)) (PAIR%1 prod (%VARTYPE . |'a|) (%VARTYPE . |'a|)) (x%0 %VARTYPE . |'a|)) (axiom (FIX_EQ forall (var f %t . f%10) pred equiv comb ((comb ((const PAIR) comb ((var f %t . f%10) comb ((const FIX) var f %t . f%10)))) comb ((const FIX) var f %t . f%10) %t . x%0) %t . PAIR%1) (SND_PAIR forall (var x %t . x%0) forall (var y %t . SND%8) pred equiv comb ((comb ((const PAIR) comb ((const SND) comb ((comb ((const PAIR) var x %t . x%0)) var y %t . SND%8) %t . x%7) %t . SND%8)) var y %t . SND%8) %t . PAIR%4) (FST_PAIR forall (var x %t . x%0) forall (var y %t . SND%8) pred equiv comb ((comb ((const PAIR) comb ((const FST) comb ((comb ((const PAIR) var x %t . x%0)) var y %t . SND%8) %t . x%7) %t . x%0)) var x %t . x%0) %t . PAIR%1) (MK_PAIR forall (var x %t . x%7) pred equiv comb ((comb ((const PAIR) comb ((comb ((const PAIR) comb ((const FST) var x %t . x%7) %t . x%0)) comb ((const SND) var x %t . x%7) %t . SND%8) %t . x%7)) var x %t . x%7) %t . PAIR%9) (VOID_CASES forall (var x void) pred equiv comb ((comb ((const PAIR) var x void)) const UU void) %t . PAIR%6) (TR_LESS_DISTINCT conj (imp (pred inequiv comb ((comb ((const PAIR) const TT)) const FF) %t . PAIR%5) pred FALSITY const |()|) conj (imp (pred inequiv comb ((comb ((const PAIR) const FF)) const TT) %t . PAIR%5) pred FALSITY const |()|) conj (imp (pred inequiv comb ((comb ((const PAIR) const TT)) const UU tr) %t . PAIR%5) pred FALSITY const |()|) imp (pred inequiv comb ((comb ((const PAIR) const FF)) const UU tr) %t . PAIR%5) pred FALSITY const |()|) (TR_CASES forall (var p tr) disj (pred equiv comb ((comb ((const PAIR) var p tr)) const UU tr) %t . PAIR%5) disj (pred equiv comb ((comb ((const PAIR) var p tr)) const TT) %t . PAIR%5) pred equiv comb ((comb ((const PAIR) var p tr)) const FF) %t . PAIR%5) (COND_CLAUSES forall (var x %t . x%0) forall (var y %t . x%0) conj (pred equiv comb ((comb ((const PAIR) comb ((comb ((comb ((const COND) const UU tr)) var x %t . x%0)) var y %t . x%0) %t . x%0)) const UU %t . x%0) %t . PAIR%1) conj (pred equiv comb ((comb ((const PAIR) comb ((comb ((comb ((const COND) const TT)) var x %t . x%0)) var y %t . x%0) %t . x%0)) var x %t . x%0) %t . PAIR%1) pred equiv comb ((comb ((const PAIR) comb ((comb ((comb ((const COND) const FF)) var x %t . x%0)) var y %t . x%0) %t . x%0)) var y %t . x%0) %t . PAIR%1) (MINIMAL forall (var x %t . x%0) pred inequiv comb ((comb ((const PAIR) const UU %t . x%0)) var x %t . x%0) %t . PAIR%1) (LESS_EXT forall (var f %t . f%2) forall (var g %t . f%2) imp (forall (var x %t . x%0) pred inequiv comb ((comb ((const PAIR) comb ((var f %t . f%2) var x))) comb ((var g %t . f%2) var x)) %t . PAIR%4) pred inequiv comb ((comb ((const PAIR) var f %t . f%2)) var g %t . f%2) %t . PAIR%3) (MONO forall (var f %t . f%2) forall (var g %t . f%2) forall (var x %t . x%0) forall (var y %t . x%0) imp (conj (pred inequiv comb ((comb ((const PAIR) var f %t . f%2)) var g %t . f%2) %t . PAIR%3) pred inequiv comb ((comb ((const PAIR) var x %t . x%0)) var y %t . x%0) %t . PAIR%1) pred inequiv comb ((comb ((const PAIR) comb ((var f %t . f%2) var x))) comb ((var g %t . f%2) var y)) %t . PAIR%4) (LESS_TRANS forall (var x %t . x%0) forall (var y %t . x%0) forall (var z %t . x%0) imp (conj (pred inequiv comb ((comb ((const PAIR) var x %t . x%0)) var y %t . x%0) %t . PAIR%1) pred inequiv comb ((comb ((const PAIR) var y %t . x%0)) var z %t . x%0) %t . PAIR%1) pred inequiv comb ((comb ((const PAIR) var x %t . x%0)) var z %t . x%0) %t . PAIR%1) (LESS_ANTI_SYM forall (var x %t . x%0) forall (var y %t . x%0) imp (conj (pred inequiv comb ((comb ((const PAIR) var x %t . x%0)) var y %t . x%0) %t . PAIR%1) pred inequiv comb ((comb ((const PAIR) var y %t . x%0)) var x %t . x%0) %t . PAIR%1) pred equiv comb ((comb ((const PAIR) var x %t . x%0)) var y %t . x%0) %t . PAIR%1) (LESS_REFL forall (var x %t . x%0) pred inequiv comb ((comb ((const PAIR) var x %t . x%0)) var x %t . x%0) %t . PAIR%1) (TRUTH pred TRUTH const |()|)) (fact (EXISTS_FALSITY iff (exists (var x %t . x%0) pred FALSITY const |()|) pred FALSITY const |()|) (EXISTS_TRUTH iff (exists (var x %t . x%0) pred TRUTH const |()|) pred TRUTH const |()|) (FORALL_FALSITY iff (forall (var x %t . x%0) pred FALSITY const |()|) pred FALSITY const |()|) (FORALL_TRUTH iff (forall (var x %t . x%0) pred TRUTH const |()|) pred TRUTH const |()|) (SND_STRICT pred equiv comb ((comb ((const PAIR) comb ((const SND) const UU %t . x%7) %t . SND%8)) const UU %t . SND%8) %t . PAIR%4) (FST_STRICT pred equiv comb ((comb ((const PAIR) comb ((const FST) const UU %t . x%7) %t . x%0)) const UU %t . x%0) %t . PAIR%1) (LESS_UU forall (var x %t . x%0) iff (pred inequiv comb ((comb ((const PAIR) var x %t . x%0)) const UU %t . x%0) %t . PAIR%1) pred equiv comb ((comb ((const PAIR) var x %t . x%0)) const UU %t . x%0) %t . PAIR%1) (ETA_EQ forall (var f %t . f%2) pred equiv comb ((comb ((const PAIR) abs ((var x %t . x%0) comb ((var f %t . f%2) var x)))) var f %t . f%2) %t . PAIR%3) (MIN_ABS pred equiv comb ((comb ((const PAIR) abs ((var x %t . x%0) const UU %t . SND%8))) const UU %t . f%2) %t . PAIR%3) (MIN_COMB forall (var x %t . x%0) pred equiv comb ((comb ((const PAIR) comb ((const UU) var x %t . x%0) %t . SND%8)) const UU %t . SND%8) %t . PAIR%4) (TR_EQ_DISTINCT conj (imp (pred equiv comb ((comb ((const PAIR) const TT)) const FF) %t . PAIR%5) pred FALSITY const |()|) conj (imp (pred equiv comb ((comb ((const PAIR) const FF)) const TT) %t . PAIR%5) pred FALSITY const |()|) conj (imp (pred equiv comb ((comb ((const PAIR) const TT)) const UU tr) %t . PAIR%5) pred FALSITY const |()|) conj (imp (pred equiv comb ((comb ((const PAIR) const UU tr)) const TT) %t . PAIR%5) pred FALSITY const |()|) conj (imp (pred equiv comb ((comb ((const PAIR) const FF)) const UU tr) %t . PAIR%5) pred FALSITY const |()|) imp (pred equiv comb ((comb ((const PAIR) const UU tr)) const FF) %t . PAIR%5) pred FALSITY const |()|) (EQ_EXT forall (var f %t . f%2) forall (var g %t . f%2) imp (forall (var x %t . x%0) pred equiv comb ((comb ((const PAIR) comb ((var f %t . f%2) var x))) comb ((var g %t . f%2) var x)) %t . PAIR%4) pred equiv comb ((comb ((const PAIR) var f %t . f%2)) var g %t . f%2) %t . PAIR%3) (EQ_TRANS forall (var x %t . x%0) forall (var y %t . x%0) forall (var z %t . x%0) imp (conj (pred equiv comb ((comb ((const PAIR) var x %t . x%0)) var y %t . x%0) %t . PAIR%1) pred equiv comb ((comb ((const PAIR) var y %t . x%0)) var z %t . x%0) %t . PAIR%1) pred equiv comb ((comb ((const PAIR) var x %t . x%0)) var z %t . x%0) %t . PAIR%1) (EQ_SYM forall (var x %t . x%0) forall (var y %t . x%0) imp (pred equiv comb ((comb ((const PAIR) var x %t . x%0)) var y %t . x%0) %t . PAIR%1) pred equiv comb ((comb ((const PAIR) var y %t . x%0)) var x %t . x%0) %t . PAIR%1) (EQ_ANAL forall (var x %t . x%0) forall (var y %t . x%0) imp (pred equiv comb ((comb ((const PAIR) var x %t . x%0)) var y %t . x%0) %t . PAIR%1) conj (pred inequiv comb ((comb ((const PAIR) var x %t . x%0)) var y %t . x%0) %t . PAIR%1) pred inequiv comb ((comb ((const PAIR) var y %t . x%0)) var x %t . x%0) %t . PAIR%1) (EQ_REFL forall (var x %t . x%0) pred equiv comb ((comb ((const PAIR) var x %t . x%0)) var x %t . x%0) %t . PAIR%1))))
